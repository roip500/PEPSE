roip500
omer.benmoshe


1) The deference's between the UML:
a - We added interface's to the pepse package. at first we didn't know how to send a function
    from one class to another so we didn't anticipate that we had to create a interface. But after
    research and revising the course we realized that its important for the game.
b - In the tree package we were not sure at first how we would implement the leafs, so we only had one
    class in the package.
c - We added to the daynight package a moon and a moon halo as part of our bonuses.
d - The removeInRange functions in Tree and Terrain were added as part creating the infinite world.
    We didn't realize how this effect will be implemented so we couldn't has predicted these functions
    prior.
e - We added a new class called WorldEdge which was used to keep the turtle in the game when letting
    them move around.
f - Adding a new package called turtles that holds the classed Turtles (=in charge of creating the
    turtles and removing them) and the class Turtle(=the game object called turtle in charge of all
    the turtles behaviors).


2) How we made our world infinite:
We started by creating HashMap<Integer, HashSet<?>> in Terrain and Tree classes.
these HashMaps hold for each x coordination a set of block or Leaf objects that are in the
x colum and are part of the game at the specific moment.
We implemented the function removeInRange(minX, maxX) in Terrain and Tree classes, which will remove
the gameObjects in the space between the minX coordination and the maxX coordination. By doing this we can
remove the game objects from the game manager in time complexity of O(n), n being the number of objects to
remove.
In PepseGameManager we implemented a function update which checks the Avatars location compared to the
edges of the world. If its closer to one edge by a distance we have determined, then the function will
call upon the removeInRange function from Tree and Terrain and remove the game objects that are out of
the range. Next the function we ask Tree and Terrain to create new game objects by calling createInRange,
there by adding to the closer end a couple more columns. by repeating this action, and removing and adding
the object out side the screen, it give the illusion that the world is in fact infinite.


3) How we implemented the package tree:
We created in the package 2 classes - Tree and Leaf.
Tree is the main class that creates the trunk and the leafs, responsible for the HashMaps of both objects,
and is in charge of adding them to the game or removing them if out of range.
Leaf extends GameObject and responsible for all the Transitions the leaf is meant to do during the game.


4) Dilemmas during the project:
a - We debated if we should create 2 leaf classes, one will be in charge of the leaf while it
    on the tree, and one while its not. The advantages of having two classes is that it will reduce the
    pressure on the game manager and will also made both classes simpler instead of having lots of moving
    parts inside one class. But after re-examining the problem we decided to create only one class, because
    the advantage of having to classes are redundant compared to the fast that we would have to implement 3
    different class. (on-tree-leaf, off-tree-leaf, manager) and the time complexity for each leaf would have
    been far greater then if it was managed by one class.
b - We wanted to send Tree the function GroundHeightAt(float x) from Terrain but without saving the
    Terrain class object in Tree. after lots of research we found that we can implement a interface and
    use @FunctionInterface and that way sent to Tree only the function and no more, which implements the
    encapsulation method as taught in the course.
c - We wanted to use a Counter object for the avatars energy but we were instructed to reduce the energy
    by 0.5 each round and the counter object only takes integers not floats. We fixed this problem by
    increasing the max energy from 100 to 200 and the changing number from 0.5 to 1 and that way we still keep
    the same ratio but can now use the Counter object.
d - We created a turtle that will move, jump, and when collided with the avatar, the avatar will get points
    and the turtle will be removed from the screen. the problem was not creating the turtles in the same
    coordinates as a tree, which shouldn't be possible, and adding them to the infinite world. The first
    problem we fixed by creating a new function in tree which will return true if a tree exists in the
    coordinate x. By using Function Interface we sent the function to the class Turtles (in charge of creating
    the turtles and removing them) and setting that only if the function returns false then it can create a
    turtle in that coordinate. The second problem we fixed by creating a new class called WorldEdges that
    holds 2 integers - the coordinate x of the left edge and the coordinate x of the right edge. We update
    this class every update of PepseGameManager. By sending this class to the Turtle class, we make sure that
    if the turtle reaches an edge it will turn around.


5) Bonuses we implemented:
a - added a moon and a moon_halo, and synchronized the day and night with the sun and the moon
b - we created our avatar based on the character Mario.
c - animals that walk, jump
d - the avatars energy and score are printed on the screen
e - avatar getting points for colliding with animals